{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","Scroll","props","style","overflow","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uOAgBeA,EAdF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAEtB,OAEI,sBAAKC,UAAU,uDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCcLK,EAtBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAMPC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GACjC,OACA,cAAC,EAAD,CAEIT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZU,MAMb,OACI,8BACKH,KCTEI,EARF,SAACC,GACV,OACI,qBAAKC,MAAO,CAAEC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,SAAhE,SACCJ,EAAMK,YCQAC,EAXC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC1B,OACK,qBAAKlB,UAAU,MAAf,SACG,uBAAOA,UAAU,mCACjBmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCYPI,G,yDAhBf,WAAYZ,GAAO,IAAD,8BACd,cAAMA,IACDa,MAAM,CACPC,UAAS,GAHC,E,8DAMIC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACJ,4DAEFG,KAAKjB,MAAMK,a,GAdCc,cC+CZC,G,yDA1CX,aAAc,IAAD,8BACT,gBAaHC,eAAgB,SAACC,GACd,EAAMJ,SAAS,CAACX,YAAYe,EAAMC,OAAOC,SAbzC,EAAKX,MAAM,CACPnB,OAAO,GACPa,YAAY,IAJP,E,gEAQO,IAAD,OACfkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAQ,EAAKX,SAAS,CAACxB,OAAOmC,S,+BAS/B,IAAD,OACEC,EAAeb,KAAKJ,MAAMnB,OAAOqC,QAAO,SAAAC,GAC1C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKrB,MAAMN,YAAY0B,kBAEpE,OAA8B,IAA3BhB,KAAKJ,MAAMnB,OAAOyC,OACV,2CAGX,sBAAK7C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,2BACA,cAAC,EAAD,CAAWkB,aAAcS,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACH,cAAC,EAAD,CAAU3B,OAAQoC,e,GAlCbX,cCKHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCCdO,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAKhDX,M","file":"static/js/main.8f558697.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) =>{\r\n   // const{ name,email,id}=props;\r\n    return(\r\n        \r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\r\n            <img alt='robots' src={`https://robohash.org/${id}?100*100`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Card;\r\n\r\n    \r\n\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList=({robots})=>{\r\n    // if(true){\r\n    //     throw new Error('Nooooo');\r\n\r\n    // }\r\n\r\n    const cardComponent=robots.map((user,i) =>{\r\n        return (\r\n        <Card \r\n            key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}/>\r\n        );\r\n    })\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n          </div>\r\n\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    return(\r\n        <div style={{ overflow:'scroll',border:'5px solid black',height:'800px'}}>\r\n        {props.children}\r\n        </div>\r\n    );\r\n\r\n};\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n    return (\r\n         <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots'\r\n            onChange={searchChange}\r\n            />\r\n         </div>\r\n    );\r\n}\r\nexport default SearchBox;","import { render } from '@testing-library/react';\r\nimport React, {Componenet, Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n        hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n       if(this.state.hasError){\r\n           return<h1>ooops,something went wrong</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n    }\r\n \r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>{this.setState({robots:users})});\r\n        \r\n    }\r\n     onSearchChange =(event) =>{\r\n        this. setState({searchfield:event.target.value})\r\n       // console.log(event.target.value);\r\n        \r\n         \r\n    }\r\n    render(){\r\n        const filteredRobots=this.state.robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if(this.state.robots.length===0){\r\n            return <h1>Loading..</h1>\r\n        } else {\r\n    return(\r\n        <div className='tc'> \r\n            <h1 className='f2'>RoboChadidost</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n             <CardList robots={filteredRobots}/>\r\n             </ErrorBoundry> \r\n             </Scroll>\r\n        </div> \r\n        \r\n    );\r\n}\r\n}\r\n        }\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n \r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n "],"sourceRoot":""}